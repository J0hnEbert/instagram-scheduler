from flask import Flask, render_template, request, redirect, url_for, session, flash
from werkzeug.utils import secure_filename
from instagrapi import Client
from datetime import datetime
from apscheduler.schedulers.background import BackgroundScheduler
import os

app = Flask(__name__)
app.secret_key = 'change-me'

UPLOAD_FOLDER = 'uploads'
os.makedirs(UPLOAD_FOLDER, exist_ok=True)

# Simple in-memory store for scheduled posts
scheduled_posts = []

# Hardcoded user credentials for demo purposes
VALID_USERNAME = 'admin'
VALID_PASSWORD = 'password'

# Initialize Instagram client (requires prior login)
insta_client = Client()

# Placeholder functions for GenAI

def generate_caption():
    return "Amazing photo generated by AI!"

def generate_hashtags():
    return "#ai #flask #instagrapi"

def generate_image(path):
    # This would be replaced by a real model
    with open(path, 'wb') as f:
        f.write(os.urandom(1024))

scheduler = BackgroundScheduler()


def post_to_instagram(post):
    media_path = post.get('media_path')
    caption = post.get('caption')
    if media_path.lower().endswith('.mp4'):
        insta_client.clip_upload(media_path, caption)
    else:
        insta_client.photo_upload(media_path, caption)

@app.before_first_request
def start_scheduler():
    scheduler.start()

@app.route('/login', methods=['GET', 'POST'])
def login():
    if request.method == 'POST':
        username = request.form['username']
        password = request.form['password']
        if username == VALID_USERNAME and password == VALID_PASSWORD:
            session['user'] = username
            return redirect(url_for('index'))
        flash('Invalid credentials')
    return render_template('login.html')

@app.route('/logout')
def logout():
    session.pop('user', None)
    return redirect(url_for('login'))

@app.route('/', methods=['GET', 'POST'])
def index():
    if 'user' not in session:
        return redirect(url_for('login'))

    if request.method == 'POST':
        image = request.files.get('image')
        video = request.files.get('video')
        caption = request.form.get('caption', '')
        generate = 'generate' in request.form

        media_path = None

        if generate and not image and not video:
            # Generate an image if none provided
            filename = f"gen_{datetime.now().timestamp()}.jpg"
            media_path = os.path.join(UPLOAD_FOLDER, filename)
            generate_image(media_path)
        elif image and image.filename:
            filename = secure_filename(image.filename)
            media_path = os.path.join(UPLOAD_FOLDER, filename)
            image.save(media_path)
        elif video and video.filename:
            filename = secure_filename(video.filename)
            media_path = os.path.join(UPLOAD_FOLDER, filename)
            video.save(media_path)

        if generate:
            caption = generate_caption() + " " + generate_hashtags()

        if not media_path:
            flash('No media provided')
            return redirect(url_for('index'))

        scheduled_time = datetime.now()
        scheduled_posts.append({'media_path': media_path, 'caption': caption, 'time': scheduled_time})
        scheduler.add_job(post_to_instagram, 'date', run_date=scheduled_time, args=[scheduled_posts[-1]])
        flash('Post scheduled')
        return redirect(url_for('index'))

    return render_template('index.html', posts=scheduled_posts)

if __name__ == '__main__':
    app.run(debug=True)
